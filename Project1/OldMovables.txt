
class Moveable  : public Renderable, public ActiveScript {
protected:
	int velocityX;
	int velocityY;

	int maxVelocityX;
	int maxVelocityY;

	bool blockBoarderMovement;
	bool mirrorsAtBoarders;
	bool isMirror;
	bool hasMirror;
	bool isInGameZone;

	float boarder;
	float defaultBoarder;

	std::string thisfilename;

public:
	Moveable(std::string filename, int x = 100, int y = 50, bool mirror = false, int velX = 40, int velY = 40) : Renderable(filename, Renderer, x, y){
		thisfilename = filename;

		velocityX = velX;
		velocityY = velY;

		maxVelocityX = 40;
		maxVelocityY = 40;
		/// This is attached to the std::round in Move()
		/// The problem with this is we currently can't move less than 1px a frame
		/// need a function that can decide to rythmically drop frames.

		blockBoarderMovement = true;
		mirrorsAtBoarders = true;
		//leave both of these false to be deleted offscreen
		isMirror = mirror;
		hasMirror = false;
		isInGameZone = true;

		defaultBoarder = 0.3f;
		if (isMirror) {
			boarder = 0;
		}
		else {
			boarder = defaultBoarder;
		}

		RQM.Push(this);
		ASM.Push(this);
	}

	virtual void Update(double deltaTime) {

		velocityX = TowardZeroD(velocityX, 20);
		velocityY = TowardZeroD(velocityY, 20);

#pragma region moving
		//std::cout << "velX: " << velocityX << " | DeltaTime: " << deltaTime << " | Product: " << velocityX * deltaTime << " | New Position: " << dest->x + (velocityX * deltaTime) << std::endl;
		//std::cout << "velY: " << velocityY << " | DeltaTime: " << deltaTime << " | Product: " << velocityY * deltaTime << " | New Position: " << dest->y + (velocityY * deltaTime) << std::endl;

		dest->x = std::round(dest->x + (velocityX * deltaTime));
		dest->y = std::round(dest->y + (velocityY * deltaTime));
#pragma endregion

#pragma region countering boarder movement
		if (blockBoarderMovement) {
			if ((dest->x <= 0) || (dest->x + dest->w >= screenWidth)) {
				dest->x -= velocityX * deltaTime;
				velocityX = 0;
			}
			if ((dest->y <= 0) || (dest->y + dest->h >= screenHeight)) {
				dest->y -= velocityY * deltaTime;
				velocityY = 0;
			}
		}
#pragma endregion

#pragma region Mirroring

		if (mirrorsAtBoarders && !isMirror && !hasMirror) {
			//std::cout << "check ";
			if (dest->x <= 0 - (dest->w * boarder)) {											   // Left
				//Moveable* plr = new Moveable((dest->w * boarder) + screenWidth + 10, dest->y, true, velocityX, velocityY);
				Moveable* plr = new Moveable(thisfilename, screenWidth-1, dest->y, true, velocityX, velocityY);
				hasMirror = true;
				isInGameZone = false;
				//std::cout << "left ";
			}
			else if (dest->x + dest->w >= screenWidth + (dest->w * boarder)){						// Right
				//Moveable* plr = new Moveable((dest->w * boarder) - screenWidth - 10,dest->y,true, velocityX, velocityY);
				Moveable* plr = new Moveable(thisfilename, screenWidth + 1,dest->y,true, velocityX, velocityY);
				hasMirror = true;
				isInGameZone = false;
				//std::cout << "right ";
			}
			else if (dest->y <= 0 - (dest->h * boarder)) {													// Up
				//Moveable* plr = new Moveable(dest->x, (dest->h * boarder) + screenHeight + 1, true, velocityX, velocityY);
				Moveable* plr = new Moveable(thisfilename, dest->x, screenHeight - 1, true, velocityX, velocityY);
				hasMirror = true;
				isInGameZone = false;
				//std::cout << "up ";
			}
			else if (dest->y + dest->h >= screenHeight + (dest->h * boarder)) {								// Down
				//Moveable* plr = new Moveable(dest->x, (dest->h * boarder) - screenHeight - 1, true, velocityX, velocityY);
				Moveable* plr = new Moveable(thisfilename, dest->x, screenHeight + 1, true, velocityX, velocityY);
				hasMirror = true;
				isInGameZone = false;
				//std::cout << "down ";
			}
		}
#pragma endregion

#pragma region ScreenPosition
		if (dest->x > 0 && dest->x + dest->w < screenWidth && dest->y > 0 && dest->y + dest->h < screenHeight) { //detects completly in screen. This is dumb.
			//std::cout << "inside ";
			isInGameZone = true;
			isMirror = false;
			hasMirror = false;
			boarder = defaultBoarder;
		}
		else if (dest->x + dest->w < 0 || dest->x > screenWidth || dest->y + dest->h < 0 || dest->y > screenHeight) { //completly off edge
			SR.Push(this);
			//std::cout << "outside ";
		}
		else {
			//std::cout << "middling ";
		}

		std::cout << std::endl;
#pragma endregion
	}

	virtual void ProcessEvents(const Uint8* currentKeyStates, double deltaTime) override {

		if (currentKeyStates[SDL_SCANCODE_UP]    || currentKeyStates[SDL_SCANCODE_W])
		{
			velocityY -= maxVelocityY;
		}
		if (currentKeyStates[SDL_SCANCODE_DOWN]  || currentKeyStates[SDL_SCANCODE_S])
		{
			velocityY += maxVelocityY;
		}
		if (currentKeyStates[SDL_SCANCODE_LEFT]  || currentKeyStates[SDL_SCANCODE_A])
		{
			velocityX -= maxVelocityX;
		}
		if (currentKeyStates[SDL_SCANCODE_RIGHT] || currentKeyStates[SDL_SCANCODE_D])
		{
			velocityX += maxVelocityX;
		}

		/* CHECK EVENT LOOP IF YOU FORGET WHY THIS IS CRINGE
		* 
		//remember this function is called INSIDE a for loop iterating through events
		//if key was pressed but wasn't pressed last frame
		if (ev.type == SDL_KEYDOWN) {

			switch (ev.key.keysym.sym) {
			case SDLK_UP:
			case SDLK_w:
				velocityY += maxVelocityY; break;
			case SDLK_DOWN:
			case SDLK_s:
				velocityY -= maxVelocityY; break;
			case SDLK_LEFT:
			case SDLK_a:
				velocityX += maxVelocityX; break;
			case SDLK_RIGHT:
			case SDLK_d:
				velocityX -= maxVelocityX; break;
			}
		}

		//if key was released
		if (ev.type == SDL_KEYUP) {

			switch (ev.key.keysym.sym) {
				case SDLK_UP:
				case SDLK_w:
					velocityY -= maxVelocityY; break;
				case SDLK_DOWN:
				case SDLK_s:
					velocityY += maxVelocityY; break;
				case SDLK_LEFT:
				case SDLK_a:
					velocityX -= maxVelocityX; break;
				case SDLK_RIGHT:
				case SDLK_d:
					velocityX += maxVelocityX; break;
			}
		}
		*/

		Update(deltaTime);
	}

	void Kill() {
		if (isMirror) {
			RQM.PopFront();
			ASM.PopFront();
		}
		else {
			RQM.PopBack();
			ASM.PopBack();
		}
		//std::cout << "being murdered" << std::endl;
		delete this;
	}
};

class Paddle : public Moveable {
public:
	Paddle(std::string filename, int x = 100, int y = 50, bool mirror = false, int velX = 40, int velY = 40) : Moveable(filename, x, y, mirror, velX, velY) {

	}

	void Update(double deltaTime) {

		velocityX = TowardZeroD(velocityX, 20);
		velocityY = TowardZeroD(velocityY, 20);

		//std::cout << "velY: " << velocityY << " | DeltaTime: " << deltaTime << " | Product: " << velocityY * deltaTime << " | New Position: " << dest->y + (velocityY * deltaTime) << std::endl;

		dest->y = std::round(dest->y + (velocityY * deltaTime));

#pragma region countering boarder movement
		//fish up the old one if you want it. used axis with || on either side and countered velocity. got rid of it because got stuck when moving fast enough to dodge the boarders.
		if (blockBoarderMovement) {
			if ((dest->x < 0)) {
				dest->x = 0;
			}
			if (dest->x + dest->w > screenWidth) {
				dest->x = screenWidth;
			}
			if (dest->y < 0) {
				dest->y = 0;
			}
			if (dest->y + dest->h > screenHeight) {
				dest->y = screenHeight-dest->h;
			}
		}
#pragma endregion

#pragma region Mirroring

		if (mirrorsAtBoarders && !isMirror && !hasMirror) {
			//std::cout << "check ";
			if (dest->x <= 0 - (dest->w * boarder)) {											   // Left
				//Moveable* plr = new Moveable((dest->w * boarder) + screenWidth + 10, dest->y, true, velocityX, velocityY);
				Moveable* plr = new Moveable(thisfilename, screenWidth - 1, dest->y, true, velocityX, velocityY);
				hasMirror = true;
				isInGameZone = false;
				//std::cout << "left ";
			}
			else if (dest->x + dest->w >= screenWidth + (dest->w * boarder)) {						// Right
				//Moveable* plr = new Moveable((dest->w * boarder) - screenWidth - 10,dest->y,true, velocityX, velocityY);
				Moveable* plr = new Moveable(thisfilename, screenWidth + 1, dest->y, true, velocityX, velocityY);
				hasMirror = true;
				isInGameZone = false;
				//std::cout << "right ";
			}
			else if (dest->y <= 0 - (dest->h * boarder)) {													// Up
				//Moveable* plr = new Moveable(dest->x, (dest->h * boarder) + screenHeight + 1, true, velocityX, velocityY);
				Moveable* plr = new Moveable(thisfilename, dest->x, screenHeight - 1, true, velocityX, velocityY);
				hasMirror = true;
				isInGameZone = false;
				//std::cout << "up ";
			}
			else if (dest->y + dest->h >= screenHeight + (dest->h * boarder)) {								// Down
				//Moveable* plr = new Moveable(dest->x, (dest->h * boarder) - screenHeight - 1, true, velocityX, velocityY);
				Moveable* plr = new Moveable(thisfilename, dest->x, screenHeight + 1, true, velocityX, velocityY);
				hasMirror = true;
				isInGameZone = false;
				//std::cout << "down ";
			}
		}
#pragma endregion

#pragma region ScreenPosition
		if (dest->x > 0 && dest->x + dest->w < screenWidth && dest->y > 0 && dest->y + dest->h < screenHeight) { //detects completly in screen. This is dumb.
			//std::cout << "inside ";
			isInGameZone = true;
			isMirror = false;
			hasMirror = false;
			boarder = defaultBoarder;
		}
		else if (dest->x + dest->w < 0 || dest->x > screenWidth || dest->y + dest->h < 0 || dest->y > screenHeight) { //completly off edge
			SR.Push(this);
			//std::cout << "outside ";
		}
		else {
			//std::cout << "middling ";
		}

		std::cout << std::endl;
#pragma endregion
	}

	void ProcessEvents(const Uint8* currentKeyStates, double deltaTime) override {

		if (dest->x < 1000) {
			if (currentKeyStates[SDL_SCANCODE_Q])
			{
				velocityY -= maxVelocityY;
			}
			if (currentKeyStates[SDL_SCANCODE_A])
			{
				velocityY += maxVelocityY;
			}
		}
		else {
			if (currentKeyStates[SDL_SCANCODE_E])
			{
				velocityY -= maxVelocityY;
			}
			if (currentKeyStates[SDL_SCANCODE_D])
			{
				velocityY += maxVelocityY;
			}
		}
		Update(deltaTime);
	}
};

class Ball : public Moveable {
	Paddle rightPaddle = Paddle("Paddle.png", 1220, 360);;
	Paddle leftPaddle = Paddle("Paddle.png", 60, 360);

public:
	Ball(std::string filename, int x = 100, int y = 50, bool mirror = false, int velX = 0, int velY = 0) : Moveable(filename, x, y, mirror, velX, velY) {

		Start(300);
	}

	void Update(double deltaTime) {

		dest->y = std::round(dest->y + (velocityY * deltaTime));
		dest->x = std::round(dest->x + (velocityX * deltaTime));

		CollideWithPaddle(rightPaddle);
		CollideWithPaddle(leftPaddle);

#pragma region edging

		if (dest->x <= 0 - (dest->w * 2)) {											// Left
			Start(300);
		}
		else if (dest->x + dest->w >= screenWidth + (dest->w * 2)) {				// Right
			Start(300);
		}
		else if (dest->y <= 0 - (dest->h * boarder)) {								// Up
			velocityY *= -1;
		}
		else if (dest->y + dest->h >= screenHeight + (dest->h * boarder)) {			// Down
			velocityY *= -1;
		}
#pragma endregion
	}

	//COLLIDER
	void CollideWithPaddle(Paddle paddle) {
		//https://i.stack.imgur.com/6iULg.png

		//left of the paddle, right of the ball
		int min = 0;
		int max = 0;

		bool collidingX = false;
		bool collidingY = false;

#pragma region X
		if (paddle.dest->x < dest->x) { //paddle is on the left
			min = paddle.dest->x;
			max = dest->x + dest->w;
		}
		else {							//paddle is on the right
			min = dest->x;
			max = paddle.dest->x + paddle.dest->w;
		}

		if (paddle.dest->w + dest->w > max - min) {
			collidingX = true;
		}
#pragma

#pragma region Y
		if (paddle.dest->y > dest->y) { //paddle is under
			min = dest->y;
			max = paddle.dest->y + paddle.dest->h;
		}
		else {							//paddle is over
			min = paddle.dest->y;
			max = dest->y + dest->h;
		}

		if (paddle.dest->h + dest->h > max - min) {
			collidingY = true;
		}
#pragma
		if (collidingX && collidingY) {
			velocityX *= -1;
		}
	}

	void Start(int speed) {
		SetDest(screenWidth / 2, screenHeight / 2);

		srand((int)time(0)); //makes rand actually random by seeding it against unix time

		int direction = rand() % 2;

		if (direction == 0) {
			direction--;
		}
		direction *= speed;
		velocityX = direction;

		direction = rand() % 2;
		
		if (direction == 0) {
			direction--;
		}
		direction *= speed;
		velocityY = direction;
		//happens twice to make x and y independant of eachother

		std::cout << velocityY << "  " << velocityX;
	}

	void ProcessEvents(const Uint8* currentKeyStates, double deltaTime) override {
		Update(deltaTime);
	}
};